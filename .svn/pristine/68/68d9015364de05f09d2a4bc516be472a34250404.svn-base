<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>GoJS Tree View</title>
  <meta name="description" content="A traditional tree view using TreeLayout and orthogonal links." />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Copyright 1998-2019 by Northwoods Software Corporation. -->

  <script src="/static/release/go.js"></script>
  <script id="code">
    function init() {
      if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
      var $ = go.GraphObject.make;  // for conciseness in defining templates

      myDiagram =
        $(go.Diagram, "myDiagramDiv",
          {
            allowMove: false,
            allowCopy: false,
            allowDelete: false,
            allowHorizontalScroll: false,
            
            layout:
              $(go.TreeLayout,
                {
                  alignment: go.TreeLayout.AlignmentStart,
                  angle: 0,
                  compaction: go.TreeLayout.CompactionNone,
                  layerSpacing: 16,
                  layerSpacingParentOverlap: 1,
                  nodeIndentPastParent: 1.0,
                  nodeSpacing: 0,
                  setsPortSpot: false,
                  setsChildPortSpot: false
                })
          });

      myDiagram.nodeTemplate =
        $(go.Node,
          { // no Adornment: instead change panel background color by binding to Node.isSelected
            selectionAdorned: false,
            // a custom function to allow expanding/collapsing on double-click
            // this uses similar logic to a TreeExpanderButton
            doubleClick: function(e, node) {
              var cmd = myDiagram.commandHandler;
              if (node.isTreeExpanded) {
                if (!cmd.canCollapseTree(node)) return;
              } else {
                if (!cmd.canExpandTree(node)) return;
              }
              e.handled = true;
              if (node.isTreeExpanded) {
                cmd.collapseTree(node);
              } else {
                cmd.expandTree(node);
              }
            }
          },
          $("TreeExpanderButton",
            {
              "ButtonBorder.fill": "whitesmoke",
              "ButtonBorder.stroke": null,
              "_buttonFillOver": "rgba(0,128,255,0.25)",
              "_buttonStrokeOver": null
            }),
          $(go.Panel, "Horizontal",
            { position: new go.Point(18, 0) },
            new go.Binding("background", "isSelected", function(s) { return (s ? "lightblue" : "white"); }).ofObject(),
            $(go.Picture,
              {
                width: 18, height: 18,
                margin: new go.Margin(0, 4, 0, 0),
                imageStretch: go.GraphObject.Uniform
              },
              // bind the picture source on two properties of the Node
              // to display open folder, closed folder, or document
              new go.Binding("source", "isTreeExpanded", imageConverter).ofObject(),
              new go.Binding("source", "isTreeLeaf", imageConverter).ofObject()),
            $(go.TextBlock,
              { font: '9pt Verdana, sans-serif' },
              new go.Binding("text", "name", function(s) { return  s; }))
          )  // end Horizontal Panel
        );  // end Node

      // without lines
      myDiagram.linkTemplate = $(go.Link);

      // // with lines
      // myDiagram.linkTemplate =
      //   $(go.Link,
      //     { selectable: false,
      //       routing: go.Link.Orthogonal,
      //       fromEndSegmentLength: 4,
      //       toEndSegmentLength: 4,
      //       fromSpot: new go.Spot(0.001, 1, 7, 0),
      //       toSpot: go.Spot.Left },
      //     $(go.Shape,
      //       { stroke: 'gray', strokeDashArray: [1,2] }));

      // create a random tree
      // var first_key = '{{ first_key }}';
      // var nodeDataArray = [{ key: first_key }];
      // var parentdata=nodeDataArray[0];
      // var max = 499;
      // var count = 0;
      var nodeDataArray = [];
      var numchildren = Math.floor(Math.random() * 10);
      // for (var i = 0; i < numchildren; i++) {
        // if (count >= max) return count;
        // count++;
        {% for programdetails in program_detail %}
          
          var childdata = { key: 0-'{{programdetails[0]}}',name:'{{programdetails[1]}}',parent:'' };
          nodeDataArray.push(childdata);
          alert('d')
          {% for node_details in node_detail %}
           {% if programdetails[0]==node_details[3] and node_details[2]==0 %}
              var childdata = { key: '{{node_details[0]}}',name:'{{node_details[1]}}',parent:0-'{{programdetails[0]}}' };
              nodeDataArray.push(childdata);
              {% for doc_details in doc_detail %}
                  {% if doc_details[2]==node_details[0] %}
                      var childdata = { key: 1-'{{doc_details[0]}}',name:'{{doc_details[1]}}',parent:'{{node_details[0]}}' };
                      nodeDataArray.push(childdata);


                  {% endif %}

              {% endfor %}    

            
           {% else  %}

                {% if programdetails[0]==node_details[3] and node_details[2]!=0 %}
                    var childdata = { key: '{{node_details[0]}}',name:'{{node_details[1]}}',parent:'{{node_details[2]}}' };
                    nodeDataArray.push(childdata);
                    {% for doc_details in doc_detail %}
                      {% if doc_details[2]==node_details[0] %}
                          var childdata = { key: 1-'{{doc_details[0]}}',name:'{{doc_details[1]}}',parent:'{{node_details[0]}}' };
                          nodeDataArray.push(childdata);


                      {% endif %}

                    {% endfor %}  
                  
                  {% endif %}
           {% endif %}
         
           

          {% endfor %}
         
        {% endfor %}  
        
        // count = makeTree(5, count, max, nodeDataArray, nodeDataArray[0]);
      myDiagram.model = new go.TreeModel(nodeDataArray);
    }

    // function makeTree(level, count, max, nodeDataArray, parentdata) {
    //   var numchildren = Math.floor(Math.random() * 10);
    //   // for (var i = 0; i < numchildren; i++) {
    //     // if (count >= max) return count;
    //     // count++;
    //     {% for demos in demo %}
    //       var childdata = { key: '{{demos[1]}}', parent: parentdata.key };
    //       nodeDataArray.push(childdata);
    //     {% endfor %}  
    //     // if (level > 0 && Math.random() > 0.5) {
    //     //   count = makeTree(level - 1, count, max, nodeDataArray, childdata);
    //     // }
    //   // }
    //   // return count;
    // }

    // takes a property change on either isTreeLeaf or isTreeExpanded and selects the correct image to use
    function imageConverter(prop, picture) {
      var node = picture.part;
      if (node.isTreeLeaf) {
        return "static/images/document.svg";
      } else {
        if (node.isTreeExpanded) {
          return "static/images/openFolder.svg";
        } else {
          return "static/images/closedFolder.svg";
        }
      }
    }
  </script>
</head>
<body onload="init()">
<div id="sample">
  <div id="myDiagramDiv" style="border: 1px solid black; width: 300px; height: 500px"></div>
 
</div>
</body>
</html>
